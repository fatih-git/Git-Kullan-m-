git init    //Dosyada git kurulumu yapar
code dosya adı  //dosya açar
clear   //temizler
cd klasör adı   //kalsör açar
git status  //dosya durumunu açıklar
git log     //yapılan işlemleri yazdırır
git add dosya adı     //yapılan değişiklikleri kaydeder
git rm(remove) kalsör adı   //siler
touch klasör adı    //bu adda ve uzantıda dosya oluşturur
git reset dosya adı     //klasörü untracked yapar
git checkout <commit>   //o commit numarasında neler yapıldığını kontrol eder zamanda yolculuk
git chackout master     //tekrar şimdiki zamana döner. Üstteki koddan sonra tekrar şimdiye dönmek için bu kodu kullanmak zorundasın
git restore <dosya adı>     //son yapılmış ve kaydedilmeiş değişiklikleri siler.
ls  //localde bulunan dosyalrın adını gösterir
ls -a   //localde bulunan dosyalrın adını ve yolunu gösterir.

//Deneme

git diff(different)    //Lokalde yapılan değişiklikleri git add ile günceleme yapmadan önce gösterir 
git diff <commit> <commit>  //iki commit arasındaki farklılıkları gösterir
pwd     //anlık olarak bulunduğun dizini gösterir
gtit branch     //git klasör sisteminde nerede bulunduğumuzu gösterir

Not: 
----
Barnch nedir?
Master branch git dosyalama sisteminde ana dosyaların bulunduğu daldır. Normalde yapılması gereken
ortak projelerde çalışılırken benim yapacağım yeni çalışmalar için yeni bir branch oluşturmak
ve çalışmalarımı orada yapmak. Daha sonrasında yaptığım çalışmalar test edilir ve değiştirilmesi gereken bir şey
yoksa benim branchımdaki çalışmalarım master branch'a aktarılır. Çalışmada değiştirilmesi gereken bir şey olmasa da 
Projenin işleyişine ve ilerleyişine göre çalışmalar yan dallarda kalabilir. Üst dalda yapıla değişiklikler alt dallara
işlemez.

git checkout -b <branch name>   //yeni bir branch oluşturur
git status -s   //özet status gösterir.

git log --graph --oneline --all   //Çok iş yarar oluşturulan branchları ve bağlantıları da gösteriyor arada kullan.
--oneline //tek satır okunabilir
--graph     //madde madde yıldızlama
--all   //tüm bilgileri ve bağlantıları gösterme
--help  //yazılan kodun nasıl çalıştığını ne yaptığını ve nasıl manipüle edileceğini gösteren bir sayfa açar
-f(force)     //yapılmak istenen işlemi yapmaya zorlar.
-s(short)  //özetler
-m "..."  //mesaj ekler
-am "..."   //değişiklikleri kaydedip mesaj ekler

(master)git merge <branch adı>  //master ve alt dal'ı birleştirir bunu
*bunu yaptıktan sonra merge edilen branch'da başka yeni şeyler yapılmayacaksa branch'ı sil.
git branch -d <branch adı>  //branch'ı siler.
git branch -D <branch adı>  //branch'ı silmeye zorlar.
git branch <branch adı>    //yeni branch oluşturmanın başka bir yolu
git config --global alias<kısaltma> "kısaltması yapılmak istenen kod"   //burada devamlı kullandığımız bir kodun kısalmasını oluşturuyoruz yazılım dillerinde fonksiyon oluşturmak gibi.

örneğin; "git config --global alias.<logda> "log --oneline --graph --decorate --all""
kodu, "git logda" yazdığımda direkt olarak üstteki kodu çalıştırır.
Örnek olarak ben bunu yaptım.

--global   //global olarak işlem yapar. bu etiket bilgisayardaki tüm kullanıcılarda çalıştırır hem de tüm repolarda çalışır.
--system    //bu etiket bilgisayarın her yerinde işlem yapar.
--local     //yazıldığı repositoryde etki eder.
